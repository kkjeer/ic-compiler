/* The following code was generated by JFlex 1.4.1 on 5/6/16 4:09 PM */

package ic.lex;

import ic.parser.sym;
import ic.error.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 5/6/16 4:09 PM from the specification file
 * <tt>/Users/KKjeer/workspace/ic-compiler/icc/src/ic/lex/ic.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 1;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 55,  3,  0,  0,  6,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     9, 50,  2,  0,  0, 47, 48,  0, 12, 13,  8, 45, 39, 46, 44,  7, 
    11,  1,  1,  1,  1,  1,  1,  1,  1,  1, 53, 40, 51, 43, 52,  0, 
     0,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 34,  5,  5,  5, 
     5,  5,  5,  5,  5, 36,  5,  5,  5,  5,  5, 41, 54, 42,  0, 10, 
     0, 16, 32, 14, 26, 19, 27, 31, 23, 24,  4, 33, 15,  4, 22, 30, 
     4,  4, 18, 17, 20, 21, 29, 28, 25, 35,  4, 37, 49, 38,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\2\1\11\1\12\14\5\2\6\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\2\1\1\26\1\27\1\30\1\31\3\4\1\32"+
    "\1\33\1\1\1\4\1\34\1\35\1\36\1\37\14\5"+
    "\1\40\6\5\2\6\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\2\0"+
    "\11\5\1\55\1\5\1\56\6\5\2\6\5\5\1\57"+
    "\1\5\1\60\1\61\1\62\3\5\1\63\2\5\1\6"+
    "\1\64\1\65\5\5\1\66\1\5\1\67\1\70\1\5"+
    "\1\6\1\5\1\71\1\72\1\73\3\5\1\6\1\5"+
    "\1\74\1\5\1\75\1\76\1\77\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\250\0\250\0\u0118"+
    "\0\u0150\0\u0188\0\u01c0\0\u01f8\0\u0230\0\250\0\u0268\0\u02a0"+
    "\0\u02d8\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460"+
    "\0\u0498\0\u04d0\0\u0508\0\u0540\0\250\0\250\0\250\0\250"+
    "\0\250\0\250\0\u0578\0\250\0\250\0\250\0\250\0\u05b0"+
    "\0\u05e8\0\u0620\0\u0658\0\u0690\0\250\0\u06c8\0\u0700\0\u0738"+
    "\0\u0770\0\250\0\u07a8\0\u07e0\0\u0818\0\250\0\u01f8\0\250"+
    "\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8"+
    "\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0118\0\u0af0\0\u0b28\0\u0b60"+
    "\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\250\0\250\0\250"+
    "\0\250\0\250\0\250\0\250\0\250\0\250\0\250\0\250"+
    "\0\250\0\u0818\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8"+
    "\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0118\0\u0ee0\0\u0118\0\u0f18"+
    "\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8"+
    "\0\u1110\0\u1148\0\u1180\0\u11b8\0\u0118\0\u11f0\0\u0118\0\u0118"+
    "\0\u0118\0\u1228\0\u1260\0\u1298\0\u0118\0\u12d0\0\u1308\0\u1340"+
    "\0\u0150\0\u0118\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458\0\u0118"+
    "\0\u1490\0\u0118\0\u0118\0\u14c8\0\u1500\0\u1538\0\u0118\0\u0118"+
    "\0\u0118\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u0118\0\u1688"+
    "\0\u0118\0\u0150\0\u0118\0\u0118";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\4\1\12"+
    "\1\13\1\7\1\4\1\14\1\15\1\16\1\17\1\20"+
    "\1\10\1\21\1\22\1\23\1\24\1\10\1\25\1\10"+
    "\1\26\2\10\1\27\1\30\1\31\2\10\1\32\1\10"+
    "\1\33\1\10\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\4\4\7\1\56\2\7"+
    "\1\56\1\7\1\57\3\7\1\60\53\7\2\61\1\62"+
    "\1\4\62\61\1\63\1\4\71\0\1\5\11\0\1\5"+
    "\55\0\1\10\2\0\2\10\4\0\2\10\2\0\27\10"+
    "\24\0\1\11\2\0\2\11\4\0\2\11\2\0\27\11"+
    "\32\0\1\64\1\65\74\0\1\66\53\0\1\67\11\0"+
    "\1\67\64\0\1\70\60\0\1\10\2\0\2\10\4\0"+
    "\2\10\2\0\1\10\1\71\16\10\1\72\6\10\24\0"+
    "\1\10\2\0\2\10\4\0\2\10\2\0\5\10\1\73"+
    "\21\10\24\0\1\10\2\0\2\10\4\0\2\10\2\0"+
    "\6\10\1\74\20\10\24\0\1\10\2\0\2\10\4\0"+
    "\2\10\2\0\5\10\1\75\21\10\24\0\1\10\2\0"+
    "\2\10\4\0\2\10\2\0\1\10\1\76\11\10\1\77"+
    "\13\10\24\0\1\10\2\0\2\10\4\0\2\10\2\0"+
    "\4\10\1\100\4\10\1\101\15\10\24\0\1\10\2\0"+
    "\2\10\4\0\2\10\2\0\5\10\1\102\1\10\1\103"+
    "\17\10\24\0\1\10\2\0\2\10\4\0\2\10\2\0"+
    "\10\10\1\104\4\10\1\105\11\10\24\0\1\10\2\0"+
    "\2\10\4\0\2\10\2\0\2\10\1\106\4\10\1\107"+
    "\17\10\24\0\1\10\2\0\2\10\4\0\2\10\2\0"+
    "\11\10\1\110\15\10\24\0\1\10\2\0\2\10\4\0"+
    "\2\10\2\0\20\10\1\111\6\10\24\0\1\10\2\0"+
    "\2\10\4\0\2\10\2\0\4\10\1\112\13\10\1\113"+
    "\6\10\24\0\1\11\2\0\2\11\4\0\2\11\2\0"+
    "\12\11\1\114\14\11\24\0\1\11\2\0\2\11\4\0"+
    "\2\11\2\0\10\11\1\115\16\11\76\0\1\116\74\0"+
    "\1\117\70\0\1\120\61\0\1\121\67\0\1\122\67\0"+
    "\1\123\17\0\1\56\2\0\1\56\76\0\1\124\62\0"+
    "\1\125\57\0\2\61\2\0\62\61\4\0\1\126\21\0"+
    "\1\127\1\0\1\130\37\0\1\131\1\0\3\64\1\0"+
    "\64\64\10\132\1\133\57\132\1\0\1\10\2\0\2\10"+
    "\4\0\2\10\2\0\2\10\1\134\24\10\24\0\1\10"+
    "\2\0\2\10\4\0\2\10\2\0\10\10\1\135\16\10"+
    "\24\0\1\10\2\0\2\10\4\0\2\10\2\0\10\10"+
    "\1\136\16\10\24\0\1\10\2\0\2\10\4\0\2\10"+
    "\2\0\4\10\1\137\22\10\24\0\1\10\2\0\2\10"+
    "\4\0\2\10\2\0\6\10\1\140\20\10\24\0\1\10"+
    "\2\0\2\10\4\0\2\10\2\0\3\10\1\141\23\10"+
    "\24\0\1\10\2\0\2\10\4\0\2\10\2\0\6\10"+
    "\1\142\20\10\24\0\1\10\2\0\2\10\4\0\2\10"+
    "\2\0\7\10\1\143\17\10\24\0\1\10\2\0\2\10"+
    "\4\0\2\10\2\0\12\10\1\144\14\10\24\0\1\10"+
    "\2\0\2\10\4\0\2\10\2\0\16\10\1\145\10\10"+
    "\24\0\1\10\2\0\2\10\4\0\2\10\2\0\1\10"+
    "\1\146\25\10\24\0\1\10\2\0\2\10\4\0\2\10"+
    "\2\0\6\10\1\147\20\10\24\0\1\10\2\0\2\10"+
    "\4\0\2\10\2\0\1\10\1\150\25\10\24\0\1\10"+
    "\2\0\2\10\4\0\2\10\2\0\10\10\1\151\16\10"+
    "\24\0\1\10\2\0\2\10\4\0\2\10\2\0\12\10"+
    "\1\152\14\10\24\0\1\10\2\0\2\10\4\0\2\10"+
    "\2\0\12\10\1\153\14\10\24\0\1\10\2\0\2\10"+
    "\4\0\2\10\2\0\5\10\1\154\21\10\24\0\1\10"+
    "\2\0\2\10\4\0\2\10\2\0\20\10\1\155\6\10"+
    "\24\0\1\11\2\0\2\11\4\0\2\11\2\0\22\11"+
    "\1\156\4\11\24\0\1\11\2\0\2\11\4\0\2\11"+
    "\2\0\12\11\1\157\14\11\23\0\7\132\1\7\1\133"+
    "\57\132\1\0\1\10\2\0\2\10\4\0\2\10\2\0"+
    "\3\10\1\160\23\10\24\0\1\10\2\0\2\10\4\0"+
    "\2\10\2\0\6\10\1\161\20\10\24\0\1\10\2\0"+
    "\2\10\4\0\2\10\2\0\21\10\1\162\5\10\24\0"+
    "\1\10\2\0\2\10\4\0\2\10\2\0\12\10\1\163"+
    "\14\10\24\0\1\10\2\0\2\10\4\0\2\10\2\0"+
    "\7\10\1\164\17\10\24\0\1\10\2\0\2\10\4\0"+
    "\2\10\2\0\5\10\1\165\21\10\24\0\1\10\2\0"+
    "\2\10\4\0\2\10\2\0\5\10\1\166\21\10\24\0"+
    "\1\10\2\0\2\10\4\0\2\10\2\0\5\10\1\167"+
    "\21\10\24\0\1\10\2\0\2\10\4\0\2\10\2\0"+
    "\3\10\1\170\23\10\24\0\1\10\2\0\2\10\4\0"+
    "\2\10\2\0\1\10\1\171\25\10\24\0\1\10\2\0"+
    "\2\10\4\0\2\10\2\0\3\10\1\172\23\10\24\0"+
    "\1\10\2\0\2\10\4\0\2\10\2\0\1\173\26\10"+
    "\24\0\1\10\2\0\2\10\4\0\2\10\2\0\1\10"+
    "\1\174\25\10\24\0\1\10\2\0\2\10\4\0\2\10"+
    "\2\0\14\10\1\175\12\10\24\0\1\10\2\0\2\10"+
    "\4\0\2\10\2\0\2\10\1\176\24\10\24\0\1\10"+
    "\2\0\2\10\4\0\2\10\2\0\1\10\1\177\25\10"+
    "\24\0\1\11\2\0\2\11\4\0\2\11\2\0\4\11"+
    "\1\200\22\11\24\0\1\11\2\0\2\11\4\0\2\11"+
    "\2\0\6\11\1\201\20\11\24\0\1\10\2\0\2\10"+
    "\4\0\2\10\2\0\3\10\1\202\23\10\24\0\1\10"+
    "\2\0\2\10\4\0\2\10\2\0\12\10\1\203\14\10"+
    "\24\0\1\10\2\0\2\10\4\0\2\10\2\0\6\10"+
    "\1\204\20\10\24\0\1\10\2\0\2\10\4\0\2\10"+
    "\2\0\10\10\1\205\16\10\24\0\1\10\2\0\2\10"+
    "\4\0\2\10\2\0\4\10\1\206\22\10\24\0\1\10"+
    "\2\0\2\10\4\0\2\10\2\0\10\10\1\207\16\10"+
    "\24\0\1\10\2\0\2\10\4\0\2\10\2\0\5\10"+
    "\1\210\21\10\24\0\1\10\2\0\2\10\4\0\2\10"+
    "\2\0\6\10\1\211\20\10\24\0\1\10\2\0\2\10"+
    "\4\0\2\10\2\0\5\10\1\212\21\10\24\0\1\10"+
    "\2\0\2\10\4\0\2\10\2\0\23\10\1\213\3\10"+
    "\24\0\1\10\2\0\2\10\4\0\2\10\2\0\5\10"+
    "\1\214\21\10\24\0\1\11\2\0\2\11\4\0\2\11"+
    "\2\0\2\11\1\215\24\11\24\0\1\10\2\0\2\10"+
    "\4\0\2\10\2\0\10\10\1\216\16\10\24\0\1\10"+
    "\2\0\2\10\4\0\2\10\2\0\11\10\1\217\15\10"+
    "\24\0\1\10\2\0\2\10\4\0\2\10\2\0\21\10"+
    "\1\220\5\10\24\0\1\10\2\0\2\10\4\0\2\10"+
    "\2\0\10\10\1\221\16\10\24\0\1\10\2\0\2\10"+
    "\4\0\2\10\2\0\14\10\1\222\12\10\24\0\1\10"+
    "\2\0\2\10\4\0\2\10\2\0\12\10\1\223\14\10"+
    "\24\0\1\10\2\0\2\10\4\0\2\10\2\0\2\10"+
    "\1\224\24\10\24\0\1\11\2\0\2\11\4\0\2\11"+
    "\2\0\4\11\1\225\22\11\24\0\1\10\2\0\2\10"+
    "\4\0\2\10\2\0\7\10\1\226\17\10\24\0\1\10"+
    "\2\0\2\10\4\0\2\10\2\0\3\10\1\227\23\10"+
    "\24\0\1\10\2\0\2\10\4\0\2\10\2\0\20\10"+
    "\1\230\6\10\24\0\1\10\2\0\2\10\4\0\2\10"+
    "\2\0\10\10\1\231\16\10\24\0\1\11\2\0\2\11"+
    "\4\0\2\11\2\0\25\11\1\232\1\11\24\0\1\10"+
    "\2\0\2\10\4\0\2\10\2\0\5\10\1\233\21\10"+
    "\24\0\1\10\2\0\2\10\4\0\2\10\2\0\10\10"+
    "\1\234\16\10\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5824];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\2\11\6\1\1\11\16\1\6\11"+
    "\1\1\4\11\5\1\1\11\4\1\1\11\3\1\1\11"+
    "\1\1\1\11\25\1\14\11\2\0\101\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
int numNestedComments = 1; 
  /** for use in building string literals in the STRING state */
  StringBuffer stringLiteral = new StringBuffer();
  
  /** Create a token with the given type and the given value */
  Token create(int type, Object value) {
    return new Token(type, value, yyline+1);
  }
  
  /** Create a token with the given type and no value */
  Token create(int type) {
    return create(type, null);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { /* ignore */
          }
        case 65: break;
        case 64: 
          { return create(sym.FUNCTION);
          }
        case 66: break;
        case 27: 
          { yybegin(YYINITIAL); 
                                   return create(sym.STRING_LIT, stringLiteral.toString());
          }
        case 67: break;
        case 28: 
          { throw new ic.error.LexicalError(yyline, "Unterminated comment");
          }
        case 68: break;
        case 2: 
          { try {
                                   return create(sym.INT_LIT, new Integer(yytext()));
                                } catch (NumberFormatException e) {
                                   throw new LexicalError(yyline+1, "Bad Number Format: '" + yytext() + "'");
                                }
          }
        case 69: break;
        case 29: 
          { throw new LexicalError(yyline, yytext());
          }
        case 70: break;
        case 43: 
          { stringLiteral.append('\n');
          }
        case 71: break;
        case 52: 
          { return create(sym.UNIT);
          }
        case 72: break;
        case 19: 
          { return create(sym.PLUS);
          }
        case 73: break;
        case 1: 
          { throw new LexicalError(yyline+1, "Illegal character '" + yytext() + "'");
          }
        case 74: break;
        case 9: 
          { return create(sym.OPAREN);
          }
        case 75: break;
        case 51: 
          { return create(sym.VOID);
          }
        case 76: break;
        case 32: 
          { return create(sym.IF);
          }
        case 77: break;
        case 45: 
          { return create(sym.NEW);
          }
        case 78: break;
        case 5: 
          { return create(sym.ID, yytext());
          }
        case 79: break;
        case 26: 
          { stringLiteral.append( yytext() );
          }
        case 80: break;
        case 10: 
          { return create(sym.CPAREN);
          }
        case 81: break;
        case 58: 
          { return create(sym.STRING);
          }
        case 82: break;
        case 47: 
          { return create(sym.ELSE);
          }
        case 83: break;
        case 35: 
          { return create(sym.OR);
          }
        case 84: break;
        case 17: 
          { return create(sym.EQ);
          }
        case 85: break;
        case 8: 
          { return create(sym.MULT);
          }
        case 86: break;
        case 63: 
          { return create(sym.CONTINUE);
          }
        case 87: break;
        case 60: 
          { return create(sym.EXTENDS);
          }
        case 88: break;
        case 49: 
          { return create(sym.THIS);
          }
        case 89: break;
        case 40: 
          { numNestedComments++; 
		/* ignore */
          }
        case 90: break;
        case 39: 
          { numNestedComments--; 
		if (numNestedComments == 0){
			yybegin(YYINITIAL);
			/* ignore */
		}
          }
        case 91: break;
        case 36: 
          { return create(sym.NE);
          }
        case 92: break;
        case 25: 
          { return create(sym.COLON);
          }
        case 93: break;
        case 62: 
          { return create(sym.LIBRARY);
          }
        case 94: break;
        case 30: 
          { throw new LexicalError(yyline+1, "Bad Number Format: '" + yytext() + "'");
          }
        case 95: break;
        case 18: 
          { return create(sym.DOT);
          }
        case 96: break;
        case 31: 
          { yybegin(COMMENT);
          }
        case 97: break;
        case 55: 
          { return create(sym.WHILE);
          }
        case 98: break;
        case 14: 
          { return create(sym.SEMI);
          }
        case 99: break;
        case 56: 
          { return create(sym.BREAK);
          }
        case 100: break;
        case 16: 
          { return create(sym.CBRACKET);
          }
        case 101: break;
        case 57: 
          { return create(sym.LENGTH);
          }
        case 102: break;
        case 42: 
          { stringLiteral.append('\t');
          }
        case 103: break;
        case 38: 
          { return create(sym.GE);
          }
        case 104: break;
        case 37: 
          { return create(sym.LE);
          }
        case 105: break;
        case 54: 
          { return create(sym.BOOL_LIT, false);
          }
        case 106: break;
        case 3: 
          { stringLiteral.setLength(0); yybegin(STRING);
          }
        case 107: break;
        case 46: 
          { return create(sym.INT);
          }
        case 108: break;
        case 44: 
          { stringLiteral.append('\\');
          }
        case 109: break;
        case 20: 
          { return create(sym.MINUS);
          }
        case 110: break;
        case 22: 
          { return create(sym.NOT);
          }
        case 111: break;
        case 34: 
          { return create(sym.AND);
          }
        case 112: break;
        case 59: 
          { return create(sym.RETURN);
          }
        case 113: break;
        case 7: 
          { return create(sym.DIV);
          }
        case 114: break;
        case 50: 
          { return create(sym.NULL);
          }
        case 115: break;
        case 6: 
          { return create(sym.CLS_ID, yytext());
          }
        case 116: break;
        case 33: 
          { return create(sym.EQEQ);
          }
        case 117: break;
        case 61: 
          { return create(sym.BOOLEAN);
          }
        case 118: break;
        case 24: 
          { return create(sym.GT);
          }
        case 119: break;
        case 48: 
          { return create(sym.BOOL_LIT, true);
          }
        case 120: break;
        case 13: 
          { return create(sym.COMMA);
          }
        case 121: break;
        case 21: 
          { return create(sym.MOD);
          }
        case 122: break;
        case 11: 
          { return create(sym.OBRACE);
          }
        case 123: break;
        case 23: 
          { return create(sym.LT);
          }
        case 124: break;
        case 41: 
          { stringLiteral.append('\"');
          }
        case 125: break;
        case 12: 
          { return create(sym.CBRACE);
          }
        case 126: break;
        case 53: 
          { return create(sym.CLASS);
          }
        case 127: break;
        case 15: 
          { return create(sym.OBRACKET);
          }
        case 128: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case STRING: {
              throw new ic.error.LexicalError(yyline, "Unclosed string constant");
            }
            case 157: break;
            case COMMENT: {
              throw new LexicalError(yyline, "end of file");
            }
            case 158: break;
            default:
              { return new java_cup.runtime.Symbol(sym.EOF); }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
